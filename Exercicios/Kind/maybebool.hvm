True  = λtrue λfalse true
False = λtrue λfalse false 

(Show a) = (a "True" "False")

(Bool.eql a b) = (a b (b False True))

(BoolEql a b) = (a b (b False True))

None  =      λnone λsome none
Some  = λval λnone λsome (some val)

// Returns true if Maybe is none
(IsNone a) = (a True (λb False))

// Returns true if Maybe is some
(IsSome a) = (a False (λb True))

// Returns true if both inputs are identical
(IsEql a b ) = (a (b True (λb False )) (λa (b False (λb (BoolEql a b)))))

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
(Extract a v) = (a v (λb b))

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
(Create a) = ((Some) a)

(Main) =
  // (Show False)
  // (Show (Bool.eql True True))
  // (Show (IsNone ((Some) (True))))
  // (Show (IsNone None))
  // (Show (IsSome None))
  // (Show (IsSome ((Some) (False))))
  // (Show (IsEql (None) (None)))
  // (Show (Extract ((Some) False ) (True)))
  (Show (IsSome (Create False)))

  
